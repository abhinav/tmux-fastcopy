// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/abhinav/tmux-fastcopy/internal/tmux (interfaces: Driver)

// Package tmuxtest is a generated GoMock package.
package tmuxtest

import (
	reflect "reflect"

	tmux "github.com/abhinav/tmux-fastcopy/internal/tmux"
	gomock "github.com/golang/mock/gomock"
)

// MockDriver is a mock of Driver interface.
type MockDriver struct {
	ctrl     *gomock.Controller
	recorder *MockDriverMockRecorder
}

// MockDriverMockRecorder is the mock recorder for MockDriver.
type MockDriverMockRecorder struct {
	mock *MockDriver
}

// NewMockDriver creates a new mock instance.
func NewMockDriver(ctrl *gomock.Controller) *MockDriver {
	mock := &MockDriver{ctrl: ctrl}
	mock.recorder = &MockDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDriver) EXPECT() *MockDriverMockRecorder {
	return m.recorder
}

// CapturePane mocks base method.
func (m *MockDriver) CapturePane(arg0 tmux.CapturePaneRequest) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CapturePane", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CapturePane indicates an expected call of CapturePane.
func (mr *MockDriverMockRecorder) CapturePane(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CapturePane", reflect.TypeOf((*MockDriver)(nil).CapturePane), arg0)
}

// DisplayMessage mocks base method.
func (m *MockDriver) DisplayMessage(arg0 tmux.DisplayMessageRequest) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisplayMessage", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisplayMessage indicates an expected call of DisplayMessage.
func (mr *MockDriverMockRecorder) DisplayMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisplayMessage", reflect.TypeOf((*MockDriver)(nil).DisplayMessage), arg0)
}

// NewSession mocks base method.
func (m *MockDriver) NewSession(arg0 tmux.NewSessionRequest) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSession", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewSession indicates an expected call of NewSession.
func (mr *MockDriverMockRecorder) NewSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSession", reflect.TypeOf((*MockDriver)(nil).NewSession), arg0)
}

// ResizePane mocks base method.
func (m *MockDriver) ResizePane(arg0 tmux.ResizePaneRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResizePane", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResizePane indicates an expected call of ResizePane.
func (mr *MockDriverMockRecorder) ResizePane(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResizePane", reflect.TypeOf((*MockDriver)(nil).ResizePane), arg0)
}

// ResizeWindow mocks base method.
func (m *MockDriver) ResizeWindow(arg0 tmux.ResizeWindowRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResizeWindow", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResizeWindow indicates an expected call of ResizeWindow.
func (mr *MockDriverMockRecorder) ResizeWindow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResizeWindow", reflect.TypeOf((*MockDriver)(nil).ResizeWindow), arg0)
}

// SendSignal mocks base method.
func (m *MockDriver) SendSignal(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSignal", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendSignal indicates an expected call of SendSignal.
func (mr *MockDriverMockRecorder) SendSignal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSignal", reflect.TypeOf((*MockDriver)(nil).SendSignal), arg0)
}

// SetOption mocks base method.
func (m *MockDriver) SetOption(arg0 tmux.SetOptionRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOption", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOption indicates an expected call of SetOption.
func (mr *MockDriverMockRecorder) SetOption(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOption", reflect.TypeOf((*MockDriver)(nil).SetOption), arg0)
}

// ShowOptions mocks base method.
func (m *MockDriver) ShowOptions(arg0 tmux.ShowOptionsRequest) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowOptions", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowOptions indicates an expected call of ShowOptions.
func (mr *MockDriverMockRecorder) ShowOptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowOptions", reflect.TypeOf((*MockDriver)(nil).ShowOptions), arg0)
}

// SwapPane mocks base method.
func (m *MockDriver) SwapPane(arg0 tmux.SwapPaneRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwapPane", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SwapPane indicates an expected call of SwapPane.
func (mr *MockDriverMockRecorder) SwapPane(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwapPane", reflect.TypeOf((*MockDriver)(nil).SwapPane), arg0)
}

// WaitForSignal mocks base method.
func (m *MockDriver) WaitForSignal(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForSignal", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForSignal indicates an expected call of WaitForSignal.
func (mr *MockDriverMockRecorder) WaitForSignal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForSignal", reflect.TypeOf((*MockDriver)(nil).WaitForSignal), arg0)
}
