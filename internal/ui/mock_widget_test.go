// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/abhinav/tmux-fastcopy/internal/ui (interfaces: Widget)

// Package ui is a generated GoMock package.
package ui

import (
	reflect "reflect"

	tcell "github.com/gdamore/tcell/v2"
	views "github.com/gdamore/tcell/v2/views"
	gomock "github.com/golang/mock/gomock"
)

// MockWidget is a mock of Widget interface.
type MockWidget struct {
	ctrl     *gomock.Controller
	recorder *MockWidgetMockRecorder
}

// MockWidgetMockRecorder is the mock recorder for MockWidget.
type MockWidgetMockRecorder struct {
	mock *MockWidget
}

// NewMockWidget creates a new mock instance.
func NewMockWidget(ctrl *gomock.Controller) *MockWidget {
	mock := &MockWidget{ctrl: ctrl}
	mock.recorder = &MockWidgetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWidget) EXPECT() *MockWidgetMockRecorder {
	return m.recorder
}

// Draw mocks base method.
func (m *MockWidget) Draw(arg0 views.View) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Draw", arg0)
}

// Draw indicates an expected call of Draw.
func (mr *MockWidgetMockRecorder) Draw(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Draw", reflect.TypeOf((*MockWidget)(nil).Draw), arg0)
}

// HandleEvent mocks base method.
func (m *MockWidget) HandleEvent(arg0 tcell.Event) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleEvent", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HandleEvent indicates an expected call of HandleEvent.
func (mr *MockWidgetMockRecorder) HandleEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleEvent", reflect.TypeOf((*MockWidget)(nil).HandleEvent), arg0)
}
